// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String                 @unique
  emailVerified         DateTime?
  password              String
  image                 String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  TwoFactorConfirmation TwoFactorConfirmation?
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model ResetPasswordToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Post {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  views      Int       @default(0)
  published  Boolean   @default(false)
  tags       String[]
  image      String?
  authorId   String
  authorName String
  Comment    Comment[]
  Like       Like[]
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  createdAt  DateTime @default(now())
  authorId   String
  authorName String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String   @db.ObjectId
}

model Like {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  authorId   String
  authorName String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String   @db.ObjectId

  @@unique([postId, authorId])
}
